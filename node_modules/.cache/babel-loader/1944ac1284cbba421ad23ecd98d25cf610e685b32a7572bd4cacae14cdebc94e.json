{"ast":null,"code":"// AI Service for handling Gemini API integration and text summarization\n\nclass AIService {\n  constructor() {\n    // Hardcoded Gemini API key - Replace with your actual API key\n    this.geminiApiKey = 'AIzaSyBIsRM262pVuxwziPvaY1fTEBbY9KqaPPQ'; // Replace with your actual API key\n    this.geminiApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${this.geminiApiKey}`;\n  }\n\n  // Generate discussion summary text file content\n  generateDiscussionText(messages) {\n    let discussionText = \"=== SAHA GRAM DISCUSSION SUMMARY ===\\n\";\n    discussionText += `Generated on: ${new Date().toLocaleString()}\\n`;\n    discussionText += `Total Messages: ${messages.length}\\n\\n`;\n    discussionText += \"=== CONVERSATION LOG ===\\n\\n\";\n    messages.forEach((message, index) => {\n      discussionText += `${index + 1}. SENDER: ${message.sender}\\n`;\n      discussionText += `   TIME: ${message.time}\\n`;\n      discussionText += `   MESSAGE: ${message.text}\\n`;\n      discussionText += `   TYPE: ${message.isAdmin ? 'ADMIN' : 'CITIZEN'}\\n\\n`;\n    });\n    return discussionText;\n  }\n\n  // Create and download text file\n  downloadDiscussionFile(messages) {\n    const content = this.generateDiscussionText(messages);\n    const blob = new Blob([content], {\n      type: 'text/plain'\n    });\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `saha-gram-discussion-${Date.now()}.txt`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(url);\n    return content;\n  }\n\n  // Call Gemini API for summarization\n  async callGeminiAPI(discussionText) {\n    const prompt = `Please analyze this community discussion from Saha Gram (Digital Village Platform) and provide a comprehensive summary of all topics discussed:\n\n${discussionText}\n\nPlease provide a detailed summary covering:\n\n📋 **MAIN TOPICS DISCUSSED:**\n- List all key topics and issues raised by citizens\n- Include specific problems, suggestions, and questions\n\n👥 **CITIZEN CONCERNS:**\n- Summarize the primary concerns raised by community members\n- Highlight urgent issues that need attention\n\n🏛️ **ADMINISTRATIVE RESPONSES:**\n- Detail any responses from officials or moderators\n- Note any commitments or actions promised\n\n📊 **DISCUSSION STATISTICS:**\n- Number of active participants\n- Most discussed topics\n- Overall engagement level\n\n💭 **COMMUNITY SENTIMENT:**\n- General mood and tone of the discussion\n- Level of satisfaction with government services\n\n🎯 **ACTION ITEMS:**\n- What needs immediate attention\n- Follow-up required from authorities\n- Recommendations for improvement\n\nFormat this as a professional government report suitable for administrative review.`;\n    try {\n      var _data$candidates, _data$candidates$, _data$candidates$$con, _data$candidates$$con2, _data$candidates$$con3;\n      console.log('Making API request to:', this.geminiApiUrl);\n      const response = await fetch(this.geminiApiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: prompt\n            }]\n          }],\n          generationConfig: {\n            temperature: 0.7,\n            topK: 40,\n            topP: 0.95,\n            maxOutputTokens: 2048\n          }\n        })\n      });\n      console.log('API Response status:', response.status);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        throw new Error(`API request failed: ${response.status} - ${response.statusText}\\nDetails: ${errorText}`);\n      }\n      const data = await response.json();\n      console.log('API Response data:', data);\n      const summaryText = (_data$candidates = data.candidates) === null || _data$candidates === void 0 ? void 0 : (_data$candidates$ = _data$candidates[0]) === null || _data$candidates$ === void 0 ? void 0 : (_data$candidates$$con = _data$candidates$.content) === null || _data$candidates$$con === void 0 ? void 0 : (_data$candidates$$con2 = _data$candidates$$con.parts) === null || _data$candidates$$con2 === void 0 ? void 0 : (_data$candidates$$con3 = _data$candidates$$con2[0]) === null || _data$candidates$$con3 === void 0 ? void 0 : _data$candidates$$con3.text;\n      if (!summaryText) {\n        console.error('No summary text found in response:', data);\n        throw new Error('No summary generated by AI');\n      }\n      return summaryText;\n    } catch (error) {\n      console.error('Gemini API Error:', error);\n      return this.generateFallbackSummary(discussionText);\n    }\n  }\n\n  // Fallback summary when API is not available\n  generateFallbackSummary(discussionText) {\n    const lines = discussionText.split('\\n');\n    const messageCount = lines.filter(line => line.includes('SENDER:')).length;\n    const adminMessages = lines.filter(line => line.includes('TYPE: ADMIN')).length;\n    const citizenMessages = messageCount - adminMessages;\n    return `\n📊 DISCUSSION SUMMARY (Generated Offline)\n\n📈 STATISTICS:\n• Total Messages: ${messageCount}\n• Citizen Messages: ${citizenMessages}\n• Admin Responses: ${adminMessages}\n\n🏛️ ADMINISTRATIVE OVERVIEW:\nThis discussion involved active participation from both citizens and administrative officials on the Saha Gram digital platform.\n\n⚠️ NOTE: This is a basic summary. For detailed AI analysis, please ensure internet connectivity and valid API configuration.\n\n💡 RECOMMENDATION: Review the full discussion log for complete context and specific action items.\n    `.trim();\n  }\n\n  // Main function to generate AI summary\n  async generateAISummary(messages) {\n    let discussionText = '';\n    try {\n      // Generate and download the discussion text file\n      discussionText = this.downloadDiscussionFile(messages);\n      console.log('Generated discussion text:', discussionText.substring(0, 200) + '...');\n\n      // Get AI summary from Gemini\n      console.log('Calling Gemini API...');\n      const summary = await this.callGeminiAPI(discussionText);\n      console.log('AI Summary received:', summary.substring(0, 200) + '...');\n      return {\n        success: true,\n        summary: summary,\n        textFileGenerated: true,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('AI Summary Error:', error);\n      return {\n        success: false,\n        error: error.message,\n        summary: this.generateFallbackSummary(discussionText),\n        textFileGenerated: false\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport default new AIService();","map":{"version":3,"names":["AIService","constructor","geminiApiKey","geminiApiUrl","generateDiscussionText","messages","discussionText","Date","toLocaleString","length","forEach","message","index","sender","time","text","isAdmin","downloadDiscussionFile","content","blob","Blob","type","url","window","URL","createObjectURL","link","document","createElement","href","download","now","body","appendChild","click","removeChild","revokeObjectURL","callGeminiAPI","prompt","_data$candidates","_data$candidates$","_data$candidates$$con","_data$candidates$$con2","_data$candidates$$con3","console","log","response","fetch","method","headers","JSON","stringify","contents","parts","generationConfig","temperature","topK","topP","maxOutputTokens","status","ok","errorText","error","Error","statusText","data","json","summaryText","candidates","generateFallbackSummary","lines","split","messageCount","filter","line","includes","adminMessages","citizenMessages","trim","generateAISummary","substring","summary","success","textFileGenerated","timestamp","toISOString"],"sources":["E:/app/Sahagram/src/services/aiService.js"],"sourcesContent":["// AI Service for handling Gemini API integration and text summarization\r\n\r\nclass AIService {\r\n  constructor() {\r\n    // Hardcoded Gemini API key - Replace with your actual API key\r\n    this.geminiApiKey = 'AIzaSyBIsRM262pVuxwziPvaY1fTEBbY9KqaPPQ'; // Replace with your actual API key\r\n    this.geminiApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${this.geminiApiKey}`;\r\n  }\r\n\r\n  // Generate discussion summary text file content\r\n  generateDiscussionText(messages) {\r\n    let discussionText = \"=== SAHA GRAM DISCUSSION SUMMARY ===\\n\";\r\n    discussionText += `Generated on: ${new Date().toLocaleString()}\\n`;\r\n    discussionText += `Total Messages: ${messages.length}\\n\\n`;\r\n    discussionText += \"=== CONVERSATION LOG ===\\n\\n\";\r\n\r\n    messages.forEach((message, index) => {\r\n      discussionText += `${index + 1}. SENDER: ${message.sender}\\n`;\r\n      discussionText += `   TIME: ${message.time}\\n`;\r\n      discussionText += `   MESSAGE: ${message.text}\\n`;\r\n      discussionText += `   TYPE: ${message.isAdmin ? 'ADMIN' : 'CITIZEN'}\\n\\n`;\r\n    });\r\n\r\n    return discussionText;\r\n  }\r\n\r\n  // Create and download text file\r\n  downloadDiscussionFile(messages) {\r\n    const content = this.generateDiscussionText(messages);\r\n    const blob = new Blob([content], { type: 'text/plain' });\r\n    const url = window.URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = `saha-gram-discussion-${Date.now()}.txt`;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    window.URL.revokeObjectURL(url);\r\n    \r\n    return content;\r\n  }\r\n\r\n  // Call Gemini API for summarization\r\n  async callGeminiAPI(discussionText) {\r\n    const prompt = `Please analyze this community discussion from Saha Gram (Digital Village Platform) and provide a comprehensive summary of all topics discussed:\r\n\r\n${discussionText}\r\n\r\nPlease provide a detailed summary covering:\r\n\r\n📋 **MAIN TOPICS DISCUSSED:**\r\n- List all key topics and issues raised by citizens\r\n- Include specific problems, suggestions, and questions\r\n\r\n👥 **CITIZEN CONCERNS:**\r\n- Summarize the primary concerns raised by community members\r\n- Highlight urgent issues that need attention\r\n\r\n🏛️ **ADMINISTRATIVE RESPONSES:**\r\n- Detail any responses from officials or moderators\r\n- Note any commitments or actions promised\r\n\r\n📊 **DISCUSSION STATISTICS:**\r\n- Number of active participants\r\n- Most discussed topics\r\n- Overall engagement level\r\n\r\n💭 **COMMUNITY SENTIMENT:**\r\n- General mood and tone of the discussion\r\n- Level of satisfaction with government services\r\n\r\n🎯 **ACTION ITEMS:**\r\n- What needs immediate attention\r\n- Follow-up required from authorities\r\n- Recommendations for improvement\r\n\r\nFormat this as a professional government report suitable for administrative review.`;\r\n\r\n    try {\r\n      console.log('Making API request to:', this.geminiApiUrl);\r\n      \r\n      const response = await fetch(this.geminiApiUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          contents: [{\r\n            parts: [{\r\n              text: prompt\r\n            }]\r\n          }],\r\n          generationConfig: {\r\n            temperature: 0.7,\r\n            topK: 40,\r\n            topP: 0.95,\r\n            maxOutputTokens: 2048,\r\n          }\r\n        })\r\n      });\r\n\r\n      console.log('API Response status:', response.status);\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('API Error Response:', errorText);\r\n        throw new Error(`API request failed: ${response.status} - ${response.statusText}\\nDetails: ${errorText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('API Response data:', data);\r\n      \r\n      const summaryText = data.candidates?.[0]?.content?.parts?.[0]?.text;\r\n      \r\n      if (!summaryText) {\r\n        console.error('No summary text found in response:', data);\r\n        throw new Error('No summary generated by AI');\r\n      }\r\n      \r\n      return summaryText;\r\n    } catch (error) {\r\n      console.error('Gemini API Error:', error);\r\n      return this.generateFallbackSummary(discussionText);\r\n    }\r\n  }\r\n\r\n  // Fallback summary when API is not available\r\n  generateFallbackSummary(discussionText) {\r\n    const lines = discussionText.split('\\n');\r\n    const messageCount = lines.filter(line => line.includes('SENDER:')).length;\r\n    const adminMessages = lines.filter(line => line.includes('TYPE: ADMIN')).length;\r\n    const citizenMessages = messageCount - adminMessages;\r\n\r\n    return `\r\n📊 DISCUSSION SUMMARY (Generated Offline)\r\n\r\n📈 STATISTICS:\r\n• Total Messages: ${messageCount}\r\n• Citizen Messages: ${citizenMessages}\r\n• Admin Responses: ${adminMessages}\r\n\r\n🏛️ ADMINISTRATIVE OVERVIEW:\r\nThis discussion involved active participation from both citizens and administrative officials on the Saha Gram digital platform.\r\n\r\n⚠️ NOTE: This is a basic summary. For detailed AI analysis, please ensure internet connectivity and valid API configuration.\r\n\r\n💡 RECOMMENDATION: Review the full discussion log for complete context and specific action items.\r\n    `.trim();\r\n  }\r\n\r\n  // Main function to generate AI summary\r\n  async generateAISummary(messages) {\r\n    let discussionText = '';\r\n    \r\n    try {\r\n      // Generate and download the discussion text file\r\n      discussionText = this.downloadDiscussionFile(messages);\r\n      \r\n      console.log('Generated discussion text:', discussionText.substring(0, 200) + '...');\r\n      \r\n      // Get AI summary from Gemini\r\n      console.log('Calling Gemini API...');\r\n      const summary = await this.callGeminiAPI(discussionText);\r\n      \r\n      console.log('AI Summary received:', summary.substring(0, 200) + '...');\r\n      \r\n      return {\r\n        success: true,\r\n        summary: summary,\r\n        textFileGenerated: true,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n    } catch (error) {\r\n      console.error('AI Summary Error:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        summary: this.generateFallbackSummary(discussionText),\r\n        textFileGenerated: false\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport default new AIService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}